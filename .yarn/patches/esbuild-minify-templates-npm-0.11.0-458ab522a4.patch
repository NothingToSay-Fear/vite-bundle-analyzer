diff --git a/dist/index.js b/dist/index.js
index 6cf51014f2006ef56979b8b171a42deba9e6f299..a38219ca5a32b3cabad3c3e747ecc708457174b1 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,2 +1,132 @@
-"use strict";var b=Object.create;var m=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var P=(e,t)=>{for(var n in t)m(e,n,{get:t[n],enumerable:!0})},x=(e,t,n,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of v(t))!L.call(e,r)&&r!==n&&m(e,r,{get:()=>t[r],enumerable:!(a=k(t,r))||a.enumerable});return e};var M=(e,t,n)=>(n=e!=null?b(F(e)):{},x(t||!e||!e.__esModule?m(n,"default",{value:e,enumerable:!0}):n,e)),U=e=>x(m({},"__esModule",{value:!0}),e);var A={};P(A,{decodeUTF8:()=>y,encodeUTF8:()=>d,minify:()=>S,minifyTemplates:()=>K,stripWhitespace:()=>E,writeFiles:()=>$});module.exports=U(A);var h=M(require("@ampproject/remapping")),l=require("astray"),w=M(require("magic-string")),T=require("meriyah"),u=require("fs/promises"),g=require("path"),C=new TextEncoder,I=new TextDecoder,d=e=>C.encode(e),y=e=>I.decode(e);function E(e,t){let n=e.replace(/\s+/gm," ").replace(/> </g,"><").replace(/^ </g,"<").replace(/> $/g,">").replace(/> #(\w+) </g,">#$1<");return t||(n=n.replace(/<!--.*?-->/gs,"")),n}function S(e,t={}){let n=new w.default(e),a=[],r=(0,T.parse)(e,{next:!0,loc:!0,ranges:!0,module:!0,onComment(o,i,p,f,s){o==="MultiLine"&&i.trim()==="! minify-templates-ignore"&&a.push(s.end.line+1)}});return(0,l.walk)(r,{TemplateLiteral(o){var i,p;return a.includes(o.loc.start.line)||t.taggedOnly&&((p=(i=o.path)==null?void 0:i.parent)==null?void 0:p.type)!=="TaggedTemplateExpression"?l.SKIP:void 0},TemplateElement(o){let{start:i,end:p}=o.loc;(i.line!==p.line||i.column!==p.column)&&n.overwrite(o.start,o.end,E(o.value.raw,t.keepComments))}}),n}var K=(e={})=>({name:"minify-templates",setup(t){t.initialOptions.write===!1&&t.onEnd(n=>{var a;(a=n.outputFiles)==null||a.forEach((r,o,i)=>{if((0,g.extname)(r.path)!==".js")return;let p=y(r.contents),f=S(p,e);i[o].contents=d(f.toString());let s=i.findIndex(c=>c.path===`${r.path}.map`);if(s>-1){let c=i[s],O=(0,h.default)([{...f.generateDecodedMap({source:r.path,file:c.path,hires:!0}),version:3},y(c.contents)],()=>null);i[s].contents=d(O.toString())}})})}}),$=()=>({name:"write-files",setup(e){e.initialOptions.write===!1&&e.onEnd(async t=>{t.outputFiles&&await Promise.all(t.outputFiles.map(n=>(0,u.mkdir)((0,g.dirname)(n.path),{recursive:!0}).then(()=>(0,u.writeFile)(n.path,n.contents,"utf8"))))})}});0&&(module.exports={decodeUTF8,encodeUTF8,minify,minifyTemplates,stripWhitespace,writeFiles});
-//# sourceMappingURL=index.js.map
+var __create = Object.create;
+var __defProp = Object.defineProperty;
+var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
+var __getOwnPropNames = Object.getOwnPropertyNames;
+var __getProtoOf = Object.getPrototypeOf;
+var __hasOwnProp = Object.prototype.hasOwnProperty;
+var __export = (target, all) => {
+  for (var name in all)
+    __defProp(target, name, { get: all[name], enumerable: true });
+};
+var __copyProps = (to, from, except, desc) => {
+  if (from && typeof from === "object" || typeof from === "function") {
+    for (let key of __getOwnPropNames(from))
+      if (!__hasOwnProp.call(to, key) && key !== except)
+        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
+  }
+  return to;
+};
+var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
+  // If the importer is in node compatibility mode or this is not an ESM
+  // file that has been converted to a CommonJS file using a Babel-
+  // compatible transform (i.e. "__esModule" has not been set), then set
+  // "default" to the CommonJS "module.exports" for node compatibility.
+  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
+  mod
+));
+var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
+var stdin_exports = {};
+__export(stdin_exports, {
+  decodeUTF8: () => decodeUTF8,
+  encodeUTF8: () => encodeUTF8,
+  minify: () => minify,
+  minifyTemplates: () => minifyTemplates,
+  stripWhitespace: () => stripWhitespace,
+  writeFiles: () => writeFiles
+});
+module.exports = __toCommonJS(stdin_exports);
+var import_remapping = __toESM(require("@ampproject/remapping"));
+var import_astray = require("astray");
+var import_magic_string = __toESM(require("magic-string"));
+var import_meriyah = require("meriyah");
+var import_promises = require("node:fs/promises");
+var import_node_path = require("node:path");
+const encoder = new TextEncoder();
+const decoder = new TextDecoder();
+const encodeUTF8 = (text) => encoder.encode(text);
+const decodeUTF8 = (bytes) => decoder.decode(bytes);
+function stripWhitespace(html, keepComments) {
+  let out = html.replace(/\s+/gm, " ").replace(/> </g, "><").replace(/^ </g, "<").replace(/> $/g, ">");
+  if (!keepComments) {
+    out = out.replace(/<!--.*?-->/gs, "");
+  }
+  return out;
+}
+function minify(code, opts = {}) {
+  const out = new import_magic_string.default(code);
+  const ignoreLines = [];
+  const ast = (0, import_meriyah.parse)(code, {
+    next: true,
+    loc: true,
+    ranges: true,
+    module: true,
+    onComment(type, value, _start, _end, loc) {
+      if (type === "MultiLine" && value.trim() === "! minify-templates-ignore") {
+        ignoreLines.push(loc.end.line + 1);
+      }
+    }
+  });
+  (0, import_astray.walk)(ast, {
+    TemplateLiteral(node) {
+      var _a, _b;
+      return ignoreLines.includes(node.loc.start.line) || opts.taggedOnly && // TODO: Remove lint exception once astray types are fixed
+      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
+      ((_b = (_a = node.path) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.type) !== "TaggedTemplateExpression" ? import_astray.SKIP : void 0;
+    },
+    TemplateElement(node) {
+      const { start, end } = node.loc;
+      if (start.line !== end.line || start.column !== end.column) {
+        out.overwrite(node.start, node.end, stripWhitespace(node.value.raw, opts.keepComments));
+      }
+    }
+  });
+  return out;
+}
+const minifyTemplates = (opts = {}) => ({
+  name: "minify-templates",
+  setup(build) {
+    if (build.initialOptions.write !== false)
+      return;
+    build.onEnd((result) => {
+      var _a;
+      (_a = result.outputFiles) === null || _a === void 0 ? void 0 : _a.forEach((file, fileIndex, outputFiles) => {
+        if (![".mjs", ".js"].includes((0, import_node_path.extname)(file.path)))
+          return;
+        console.log(file.path);
+        const src = decodeUTF8(file.contents);
+        const out = minify(src, opts);
+        outputFiles[fileIndex].contents = encodeUTF8(out.toString());
+        const matchingMapIndex = outputFiles.findIndex((outputFile) => outputFile.path === `${file.path}.map`);
+        if (matchingMapIndex > -1) {
+          const mapFile = outputFiles[matchingMapIndex];
+          const remapped = (0, import_remapping.default)(
+            [
+              Object.assign(Object.assign({}, out.generateDecodedMap({
+                source: file.path,
+                file: mapFile.path,
+                hires: true
+              })), { version: 3 }),
+              // esbuild generated source map
+              decodeUTF8(mapFile.contents)
+            ],
+            // don't load other source maps; referenced files are the original source
+            () => null
+          );
+          outputFiles[matchingMapIndex].contents = encodeUTF8(remapped.toString());
+        }
+      });
+    });
+  }
+});
+const writeFiles = () => ({
+  name: "write-files",
+  setup(build) {
+    if (build.initialOptions.write !== false)
+      return;
+    build.onEnd(async (result) => {
+      if (!result.outputFiles)
+        return;
+      await Promise.all(result.outputFiles.map((file) => (0, import_promises.mkdir)((0, import_node_path.dirname)(file.path), { recursive: true }).then(() => (0, import_promises.writeFile)(file.path, file.contents, "utf8"))));
+    });
+  }
+});
\ No newline at end of file
